<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- 
        servlet-context.xml: 스프링의 가장 핵심 부품인 DispatcherServlet과 관련된 설정을 기술하는 파일
                            즉, 요청에 대한 환경설정을 작성한다.
        servlet-context.xml 파일 설정 방법
        접두어:태그명=>xmlns:접두어로 등록된 태그들만 사용 가능
                        mvc 접두어는 생략된 형태
    --> 
	<!-- Enables the Spring MVC @Controller programming model -->
    <!-- 
        @Controller와 같은 어노테이션을 활성화 시켜주는 설정

        이 설정을 하는 이유: 스프링이 알아서 객체로 만들어서 관리해줄 수 있도록 해주는 방법 두번째이기 때문
                            
        spring에서 bean 등록 방법
        1. xml 파일로 등록: 내가 직접 코드를 수정하거나 볼 수 없는 클래스인 경우(root-context.xml, servlet-context.xml에서 등록)
        2. 어노테이션을 붙여서 등록: 내가 직접 만든 클래스인 경우(클래스명 바로 위에 어노테이션을 붙임)
    --> 
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 
        webapp/resources 폴더에 대한 경로 설정

        webapp/resources: 정적 외부자원에 대해서 보관하는 폴더(이미지,css,js,..)
        -location:파일의 실제 위치
        -mapping:접근할 주소 작성
        
        이 설정을 하면 DispatcherServlet을 거치지 않고 곧바로 url 주소상으로 파일을 열람 가능
    -->
    <resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
        주소 자동 완성 도구 셋팅(응답페이지 포워딩 시 필요함)
        응답페이지만 적었을 때 바로 해당 페이지를 찾아서 포워딩 시켜줌

        prefix:접두어 (/WEB-INF/views/)
        suffix:접미어 (.jsp)

        prefix+응답페이지명+suffix로 코드가 줄어드는 원리

    -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 
        InternalResourceViewResolver internalResourceViewResolver=new InternalResourceViewResolver();
        internalResourceViewResolver.setPrefix("/WEB-INF/views/");
        internalResourceViewResolver.setSuffix(".jsp");
    -->

    <!-- 
        com.kh.spring 내부에 있는 모든 클래스들을 감시하여 
        어떤 어노테이션이 붙어있는지 빈으로 등록할건지 체크하겠다 라는 설정
    -->
	<context:component-scan base-package="com.kh.spring" />
	
	
	
</beans:beans>
